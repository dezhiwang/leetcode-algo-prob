# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

### BFS STACK:
class Solution:
    def levelOrderBottom(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        if not root:
            return []
        stack = [root]
        num_list = []
        while len(stack) > 0:
            temp = []
            tmp_stack = []
            for i in stack:
                temp.append(i.val)
                if i.left:
                    tmp_stack.append(i.left)
                if i.right:
                    tmp_stack.append(i.right)
            num_list.append(temp)
            stack = tmp_stack
            temp = []
        num_list[:] = num_list[::-1]
        return num_list

### BFS QUEUE
def levelOrderBottom(self, root):
    queue, res = collections.deque([(root, 0)]), []
    while queue:
        node, level = queue.popleft()
        if node:
            if len(res) < level+1:
                res.insert(0, [])
            res[-(level+1)].append(node.val)
            queue.append((node.left, level+1))
            queue.append((node.right, level+1))
    return res
    
### DFS recurisvely 
def levelOrderBottom1(self, root):
    res = []
    self.dfs(root, 0, res)
    return res

def dfs(self, root, level, res):
    if root:
        if len(res) < level + 1:
            res.insert(0, [])
        res[-(level+1)].append(root.val)
        self.dfs(root.left, level+1, res)
        self.dfs(root.right, level+1, res)
